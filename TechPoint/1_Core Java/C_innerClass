当当前类的 ‘ 域 ’级别控制无法通过属性时，而该‘ 域 ’又是该类独立拥有的，此时引入内部类 - 4种  ** 粒度 **


使用场景：https://www.cnblogs.com/chenssy/p/3388487.html
---------------------------------

public class OptionalTest {

    public static void main(String[] args) {
        //匿名内部类 - lambda
        new Thread(new Runnable() {
            @Override
            public void run() {
                System.out.println(Thread.currentThread().getName()+"== 匿名内部类");
            }
        }).start();

        new Thread(() -> System.out.println(Thread.currentThread().getName()+"== 匿名内部类")).start();


        //静态内部类 - 定义数据结构 - 复杂点可以使用外围类静态属性进行操作 - 创建简单
        Inner inner = new Inner();

        //成员内部类 - 需要创建外围类才能创建成员内部类
        ChenyuanInner chenyuanInner = new OptionalTest().new ChenyuanInner();
        System.out.println(chenyuanInner.cyname);

        //局部内部类

    }

    static class Inner{
        private String name ;
    }

    class ChenyuanInner{
        private String cyname = "成员内部类" ;
    }

}


----------------------------------




  1.基本语法及访问关系
    
    1.成员内部类 ***
        1.内部类可以拥有private访问权限、protected访问权限、public访问权限及包访问权限。比如上面的例子，如果成员内部类Inner用private修饰，
          则只能在外部类的内部访问，如果用public修饰，则任何地方都能访问；如果用protected修饰，则只能在同一个包下或者继承外部类的情况下访问；
          如果是默认访问权限，则只能在同一个包下访问。这一点和外部类有一点不一样，外部类只能被public和包访问两种权限修饰。
          我个人是这么理解的，由于成员内部类看起来像是外部类的一个成员，所以可以像类的成员一样拥有多种权限修饰。  
        
        2.成员内部类可以  --无条件访问外部类的所有成员属性和成员方法（包括private成员和静态成员）-- 。
        
        3.内往外
          不过要注意的是，当成员内部类拥有和外部类同名的成员变量或者方法时，会发生隐藏现象，即默认情况下访问的是成员内部类的成员。
          如果要访问外部类的同名成员，需要以下面的形式进行访问：
          
          OutterClass.this.成员属性 / 成员方法
         
        4.外往内
          虽然成员内部类可以无条件地访问外部类的成员，而外部类想访问成员内部类的成员却不是这么随心所欲了。在外部类中如果要访问成员内部类的成员，
          必须先创建一个成员内部类的对象，再通过指向这个对象的引用来访问：
          
          new InnerClass().方法/属性;
        
        5.第三方调用内部类方法
          第三方类调用含有内部类的类（这里需要以非private修饰的内部类为例，如果是，则不能再第三方中这样调用）
          new OutterClass().new Innerclass().method3();   
          //等价于：   InnerClassTest tct = new InnerClassTest();
                      InnerClassTest.InnerClass ic = tct.new InnerClass();
                      ic.method1()
    
    2.静态内部类
        1.静态内部类是不需要依赖于外部类的
        
        2.它不能使用外部类的非static成员变量或者方法，这点很好理解，因为在没有外部类的对象的情况下，可以创建静态内部类的对象，如果允许访问外部类的
          非static成员就会产生矛盾，因为外部类的非static成员必须依附于具体的对象。
          
        3.静态内部类调用 -1 调用静态内部类中非静态方法
          InnerClassTest.InnerClassStatic  iis = new InnerClassTest.InnerClassStatic();
          iis.method4();
                       -2 调用静态内部类中静态方法
          InnerClassTest.InnerClassStatic.method5();
          
     3.匿名内部类 ***
        1.匿名内部类通过直接创建无名的类，但是前提是这个父类或者接口必须先存在才能这样使用
             Comparable  c  = new Comparable() {
                  @Override
                  public int compareTo(Object o) {
                      return 111110;
                  }
              };
            通常用于setxxx(实现类)这里讲实现类（监听类 ，thread类）hibernate函数...
            扩展：compareTo()用于Collections排序时，再去定义比较规则使用的就是内部类  vs js中接口回调
            
               Map m = new HashMap(){
            //可以对m进行操作 添加方法或者重写|接口(实现)
            @Override
            public Object put(Object key, Object value) {
                 super.put(key, value);
                 return get(key).toString()+"111";
            }
            //不能传递到外面调用
            public void nowAdd(){

            }
            //初始化容器  匿名内部类
            {
                put(1, 1);
                put(1, 1);
            }
        };
        System.out.println(m.put(123, 123));//123111
    }
            
      4.局部内部类
      
      
  2.内部类规则背后的原理
  
  
  
  3.内部类对于Java"   多重继承  "的影响  *****  内部类如何“  配合接口  ”使得Java的实现的完善性
     例子：son继承父亲，母亲属性
     https://www.cnblogs.com/chenssy/p/3389027.html
     
  4.内部类使用的其他技巧及注意点
     think in java中总结点
     编译问题
     一个类中多个“ 内部类 ”
     一个内部类的“ 多个实例  ”
     ...
      
      
      
     
     
     
     
 
